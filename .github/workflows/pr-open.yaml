name: Create Ephemeral Environment - Build, Publish, and Deploy

on:
  pull_request:
    paths: 
    - 'application/**'
    - 'k8s/charts/**'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build, Publish, and Deploy

    env:
      AWS_REGION: us-west-2

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Start Deployment
      uses: bobheadxi/deployments@v0.4.3
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ephemeral

    - name: docker login
      env:
        DOCKER_USER: ${{secrets.DOCKER_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      run: |
        docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
    
    # Build and push docker image
    - name: Build, tag, and push image to Dockerhub
      id: build
      run: |
        # Build a docker image
        git_hash=$(git rev-parse --short "$GITHUB_SHA")

        app_latest_image="$DOCKER_REGISTRY/$DOCKER_REPOSITORY:$git_hash"
        cd application/ && docker build -t $app_latest_image .

        echo "Pushing image to dockerhub..."
        docker push $app_latest_image

        echo "::set-output name=app_latest_image::$app_latest_image"
      env:
        DOCKER_REGISTRY: ${{secrets.DOCKER_REGISTRY}}
        DOCKER_REPOSITORY: knote-application-ephemeral
    
    # Setup AWS CLI
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Setup Kubeconfig
    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}

    # Deploy Ephemeral Environment
    - name: Deploy Ephemeral Environment
      id: deploy
      run: |
        # install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

        # Install vCluster
        curl -s -L "https://github.com/loft-sh/vcluster/releases/latest" | sed -nE 's!.*"([^"]*vcluster-linux-amd64)".*!https://github.com\1!p' | xargs -n 1 curl -L -o vcluster && chmod +x vcluster;
        sudo mv vcluster /usr/local/bin;

        # Create a cluster
        vcluster create demo-pr-${{ github.event.pull_request.number }} --namespace test-ephemeral --expose 
        vcluster connect demo-pr-${{ github.event.pull_request.number }} --namespace test-ephemeral

        # Deploy
        helm upgrade --install --wait --timeout 360s knote-demo ./k8s/charts \
            -f ./k8s/charts/values.ephemeral.yaml \
            --set application.image=${{ steps.build.outputs.app_latest_image }}
        
        # Get client endpoint
        echo "::set-output name=endpoint::$(kubectl get services | grep 'application-lb' | awk '{print $4}')"
        
    # Publish Ephemeral Endpoint to the PR
    - name: Publish endpoint to PR
      uses: thollander/actions-comment-pull-request@v1
      with:
        message: |
          Ephemeral environment is deployed at "http://${{ steps.deploy.outputs.endpoint }}" 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Deployment Status
      uses: bobheadxi/deployments@v0.4.3
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
